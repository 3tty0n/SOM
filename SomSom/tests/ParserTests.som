ParserTests = TestCase (
  testEmptyClass = (
    | cgenc parser u |
    u := Universe new.
    parser := Parser newWith: 'Foo = ()' for: 'Foo.som' in: u.
    cgenc := parser classdef.
  )

  testSpaceBeforeEmptyClass = (
    | cgenc parser u |
    u := Universe new.
    parser := Parser newWith: '
        Foo = ()' for: 'Foo.som' in: u.
    cgenc := parser classdef.
  )

  testCommentBeforeEmptyClass = (
    | cgenc parser u |
    u := Universe new.
    parser := Parser newWith: '
      "This is a Foo Class"
      Foo = ()' for: 'Foo.som' in: u.
    cgenc := parser classdef.
  )

  testEmptyWithNilSuperClass = (
    | cgenc parser u |
    u := Universe new.
    parser := Parser newWith: 'Foo = nil ()' for: 'Foo.som' in: u.
    cgenc := parser classdef.
  )

  testEmptyWithObjectSuperClass = (
    | cgenc parser u |
    u := Universe new.
    parser := Parser newWith: 'Foo = Object ()' for: 'Foo.som' in: u.
    cgenc := parser classdef.
  )

  parseAndCaptureError: parser = (
    parser errorHandler: [:msg | ^ msg ].
    ^ parser classdef.
  )

  testEmptyClassMissingEqual = (
    | cgenc parser u |
    u := Universe new.
    parser := ParserWithError newWith: 'Foo ()' for: 'Foo.som' in: u.
    cgenc := self parseAndCaptureError: parser.
    self assert: 'Parsing failed, expected equal but found newTerm (()' equals: cgenc
  )

  testEmptyClassWithComment = (
    | cgenc parser u |
    u := Universe new.
    parser := Parser newWith: 'Foo = ( "comment" )' for: 'Foo.som' in: u.
    cgenc := parser classdef.
  )

  testClassWithFields = (
    | cgenc parser u |
    u := Universe new.
    parser := Parser newWith: 'Foo = (|a b c|)' for: 'Foo.som' in: u.
    cgenc := parser classdef.
  )

  testClassWithUnaryMethod = (
    | cgenc parser u |
    u := Universe new.
    parser := Parser newWith: 'Foo = ( m = () )' for: 'Foo.som' in: u.
    cgenc := parser classdef.
  )

  testClassWithBinaryMethod = (
    | cgenc parser u |
    u := Universe new.
    parser := Parser newWith: 'Foo = ( * o = () )' for: 'Foo.som' in: u.
    cgenc := parser classdef.
  )

  testClassWithKeywordMethod = (
    | cgenc parser u |
    u := Universe new.
    parser := Parser newWith: 'Foo = ( m: o = () )' for: 'Foo.som' in: u.
    cgenc := parser classdef.
  )

  testClassWithKeywordPrimitive = (
    | cgenc parser u |
    u := Universe new.
    parser := Parser newWith: 'Foo = ( m: o = primitive )' for: 'Foo.som' in: u.
    cgenc := parser classdef.
  )

  testClassWithVariousMethods = (
    | cgenc parser u |
    u := Universe new.
    parser := Parser newWith: '
    ClassWithVariousMethods = (
      a: o = ( | s n v | )
      b: o = ( ^ 1 )
      bn: o = ( ^ -1 )
      c: o = ( ^ 2.2 )
      cn: o = ( ^ -2.2 )
      d: o = ( ^ \'ss\' )
      e: o = ( ^ #sym )
      f: o = ( | a | a := a := 2 )
      g: o = ( o )
      h: o = ( self foo )
      i: o = ( super foo )
      j: o = ( (1) )
      k: o = ( [1] )
      k: o = ( 1 foo: 4 )
      k: o = ( 1 + 4 )
      k: o = ( 1 ++ 2 )
      k: o = ( #(2 3 4 5) )
    )' for: 'ClassWithVariousMethods.som' in: u.
    cgenc := parser classdef.
  )
)
