TestRunner = (
  | suite passes inefficacies failures |

  initializeOn: aSuite = (
    suite := aSuite.
    
    passes       := Vector new.
    inefficacies := Vector new.
    failures     := Vector new.
  )
  
  hasInefficacies = ( ^ inefficacies size > 0 )
  hasFailures     = ( ^ failures size > 0 )
  
  expectedPasses = ( ^ suite tests size )
  actualPasses   = ( ^ passes size )

  run = (
    self reportPreRun.
    self runAllTests.
    self reportPostRun.
    self overviewReport.
  )
  
  reportPreRun = (
    ('TestSuite ' + suite name + ':') println.
    ('Tests: ' + suite tests size asString) println.
  )
  
  reportPostRun = (
    self hasInefficacies ifTrue: [
      ('Inefficacies: ' + inefficacies size asString) println
    ].
    self hasFailures ifTrue: [
      ('Failures: ' + failures size asString) println
    ].
  )

  runAllTests = (
    suite tests do: [ :each |
        each run: self ].
  )
  
  overviewReport = (
    ('Tests passed: ' + passes size asString) println.
    
    (self hasFailures or: [self hasInefficacies]) ifTrue: [
        '------------------------------' println ].
    
    self hasInefficacies ifTrue: [
      ('Inefficacies: ' + inefficacies size asString) println.
      inefficacies do: [:each |
        ('    ' + each key asString) println.
        ('        ' + each value asString) println ].
    ].
    
    self hasFailures ifTrue: [
      ('Failures: ' + failures size asString) println.
      failures do: [:each |
        ('    ' + each key asString) println.
        ('        ' + each value asString) println ].
    ].
  )
  
  fail: aSignature because: aReason = (
    | pair |
    pair := Pair withKey: aSignature andValue: aReason.
    failures append: pair.
  )
  
  unsatisfied: aSignature because: aReason = (
    | pair |
    pair := Pair withKey: aSignature andValue: aReason.
    inefficacies append: pair.
  )
  
  passed: aSignature = (
    passes append: aSignature
  )
)
