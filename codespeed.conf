# -*- mode: yaml -*-
# Config file for ReBench
default_experiment: all
default_data_file: 'codespeed.data'

runs:
    max_invocation_time: 6000
    min_iteration_time:  10

benchmark_suites:
    macro-startup:
        gauge_adapter: RebenchLog
        command: &MACRO_CMD "-cp Smalltalk:Examples/Benchmarks/Richards:Examples/Benchmarks/DeltaBlue:Examples/Benchmarks/NBody:Examples/Benchmarks/Json:Examples/Benchmarks/GraphSearch Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s "
        benchmarks:
            - Richards:
                extra_args: "1 1"
            - DeltaBlue:
                extra_args: "1 1000"
            - Mandelbrot:
                extra_args: "1 300"
            - NBody:
                extra_args: "1 30000"
            - Json:
                extra_args: "1 80"
            - GraphSearch:
                extra_args: "1 30"
            - PageRank:
                extra_args: "1 1400"

    macro-steady:
        gauge_adapter: RebenchLog
        command: *MACRO_CMD
        benchmarks:
            - Richards:
                extra_args: "130 60"
                warmup: 30
            - DeltaBlue:
                extra_args: "120 20000"
                warmup: 20
            - Mandelbrot:
                extra_args: "110 1000"
                warmup: 10
            - NBody:
                extra_args: "120 500000"
                warmup: 20
            - Json:
                extra_args: "120 80"
                warmup: 20
            - GraphSearch:
                extra_args: "250 30"
                warmup: 100
            - PageRank:
                extra_args: "120 1400"
                warmup: 20

    micro-startup-100:
        gauge_adapter: RebenchLog
        command: "-cp Smalltalk:Examples/Benchmarks/LanguageFeatures Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s "
        benchmarks:
            - Fibonacci:
                extra_args: "1 100"
            - Dispatch:
                extra_args: "1 1000"
            - Bounce:
                extra_args: "1 100"
            - Loop:
                extra_args: "1 500"
            - Permute:
                extra_args: "1 50"
            - Queens:
                extra_args: "1 50"
            - List:
                extra_args: "1 50"
            - Recurse:
                extra_args: "1 100"
            - Storage:
                extra_args: "1 20"
            - Sieve:
                extra_args: "1 100"
            - BubbleSort:
                extra_args: "1 100"
            - QuickSort:
                extra_args: "1 20"
            - Sum:
                extra_args: "1 500"
            - Towers:
                extra_args: "1 20"
            - TreeSort:
                extra_args: "1 10"
            - IntegerLoop:
                extra_args: "1 400"
            - FieldLoop:
                extra_args: "1 50"
            - WhileLoop:
                extra_args: "1 1000"

    micro-startup:
        gauge_adapter: RebenchLog
        command: "-cp Smalltalk:Examples/Benchmarks/LanguageFeatures Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s "
        benchmarks:
            - Fibonacci:
                extra_args: "1 3"
            - Dispatch:
                extra_args: "1 20"
            - Bounce:
                extra_args: "1 2"
            - Loop:
                extra_args: "1 10"
            - Permute:
                extra_args: "1 3"
            - Queens:
                extra_args: "1 2"
            - List:
                extra_args: "1 2"
            - Recurse:
                extra_args: "1 3"
            - Storage:
                extra_args: "1 2"
            - Sieve:
                extra_args: "1 5"
            - BubbleSort:
                extra_args: "1 3"
            - QuickSort:
                extra_args: "1 3"
            - Sum:
                extra_args: "1 10"
            - Towers:
                extra_args: "1 2"
            - TreeSort:
                extra_args: "1 1"
            - IntegerLoop:
                extra_args: "1 8"
            - FieldLoop:
                extra_args: "1 3"
            - WhileLoop:
                extra_args: "1 30"

    micro-steady-100:
        gauge_adapter: RebenchLog
        command: "-cp Smalltalk:Examples/Benchmarks/LanguageFeatures Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s "
        benchmarks:
            - Fannkuch:
                extra_args: "55 9"
                warmup: 5
            - Fibonacci:
                extra_args: "60 1000"
                warmup: 10
            - Dispatch:
                extra_args: "55 10000"
                warmup: 5
            - Bounce:
                extra_args: "60 4000"
                warmup: 10
            - Loop:
                extra_args: "55 10000"
                warmup: 5
            - Permute:
                extra_args: "55 1500"
                warmup: 5
            - Queens:
                extra_args: "55 1000"
                warmup: 5
            - List:
                extra_args: "65 1000"
                warmup: 15
            - Recurse:
                extra_args: "65 2000"
                warmup: 15
            - Storage:
                extra_args: "60 1000"
                warmup: 10
            - Sieve:
                extra_args: "60 2500"
                warmup: 10
            - BubbleSort:
                extra_args: "60 3000"
                warmup: 10
            - QuickSort:
                extra_args: "60 2000"
                warmup: 10
            - Sum:
                extra_args: "55 10000"
                warmup: 5
            - Towers:
                extra_args: "55 1000"
                warmup: 5
            - TreeSort:
                extra_args: "60 1000"
                warmup: 10
            - IntegerLoop:
                extra_args: "55 8000"
                warmup: 5
            - FieldLoop:
                extra_args: "55 900"
                warmup: 5
            - WhileLoop:
                extra_args: "55 9000"
                warmup: 5
    micro-steady:
        gauge_adapter: RebenchLog
        command: "-cp Smalltalk:Examples/Benchmarks/LanguageFeatures Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s "
        benchmarks:
            - Fannkuch:
                extra_args: "14 6"
                warmup: 4
            - Fibonacci:
                extra_args: "15 3"
                warmup: 5
            - Dispatch:
                extra_args: "12 20"
                warmup: 2
            - Bounce:
                extra_args: "22 2"
                warmup: 12
            - Loop:
                extra_args: "14 10"
                warmup: 4
            - Permute:
                extra_args: "16 3"
                warmup: 6
            - Queens:
                extra_args: "13 2"
                warmup: 3
            - List:
                extra_args: "16 2"
                warmup: 6
            - Recurse:
                extra_args: "14 3"
                warmup: 4
            - Storage:
                extra_args: "17 2"
                warmup: 7
            - Sieve:
                extra_args: "18 5"
                warmup: 8
            - BubbleSort:
                extra_args: "16 3"
                warmup: 6
            - QuickSort:
                extra_args: "15 3"
                warmup: 5
            - Sum:
                extra_args: "20 10"
                warmup: 10
            - Towers:
                extra_args: "20 2"
                warmup: 10
            - TreeSort:
                extra_args: "15 1"
                warmup: 5
            - IntegerLoop:
                extra_args: "14 8"
                warmup: 4
            - FieldLoop:
                extra_args: "12 3"
                warmup: 2
            - WhileLoop:
                extra_args: "13 30"
                warmup: 3

    interpreter:
        description: Basic interpreter benchmarks for comparing performance of most basic concepts.
        gauge_adapter: RebenchLog
        command: "-cp Smalltalk:Examples/Benchmarks/Interpreter Examples/Benchmarks/BenchmarkHarness.som %(benchmark)s %(iterations)s 1"
        benchmarks:
            - ArgRead
            - ArrayReadConst
            - ArrayWriteConstConst
            - BlockSend0ConstReturn
            - Const
            - FieldConstWrite
            - FieldRead
            - FieldReadIncWrite
            - FieldReadWrite
            - GlobalRead
            - LocalConstWrite
            - LocalRead
            - LocalReadIncWrite
            - LocalReadWrite
            - SelfSend0
            - SelfSend0BlockConstNonLocalReturn

executors:
    SOM:
        path: ..
        executable: som.sh

    TruffleSOM-interpreter:
        path: . 
        executable: som.sh
    TruffleSOM-graal:
        path: . 
        executable: som
        args: "-E"

    CSOM:
        path: .
        executable: CSOM
    SOMpp:
        path: .
        executable: som.sh
    PySOM:
        path: .
        executable: som.sh
        
# define the benchmarks to be executed for a re-executable benchmark run
experiments:
    SOM:
        description: All benchmarks on SOM (Java, bytecode-based)
        suites:
            # - micro-startup-100
            # - micro-steady-100
            - micro-startup
            # - micro-steady
            - macro-startup
            # - macro-steady
            - interpreter
        executions:
            - SOM
    TruffleSOM:
        description: All benchmarks on TruffleSOM (Java, AST Interpreter)
        suites:
            - micro-startup-100
            - micro-steady-100
            - macro-startup
            - macro-steady
        executions:
            #- TruffleSOM-interpreter
            - TruffleSOM-graal

    CSOM:
        description: All benchmarks on CSOM
        suites:
            - micro-startup
            - macro-startup
        executions:
            - CSOM
    SOMpp:
        description: All benchmarks on SOM++
        suites:
            - micro-startup
            - micro-startup-100
            - macro-startup
        executions:
            - SOMpp
    PySOM:
        description: All benchmarks on PySOM
        suites:
            - micro-startup
            - micro-steady
            - macro-startup
        executions:
            - PySOM
